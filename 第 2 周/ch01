#include <stdio.h>
#include <stdio.h>
int maxNum(int, int, int);//求三个数中的最大值
int maxSubArraySum(int[], int, int);//递归求最大子序列和
int main()
{
	int *A, n;
	printf("请输入序列A的长度，按回车键结束： \n");
	scanf("%d,&n");
	A = (int*)malloc(sizeof(int)*n);
	printf("请输入序列A的元素，以空格隔开，按回车键结束： \n");
	for (int i = 0; i < n; i++)
	{
		scanf("%d", &A[i]);
	}
	printf("输入的序列A为：\n");
	for (int i = 0; i < n; i++)
	{
		printf(" %d\t", A[i]);
	}
	printf("\n最大子序列和为： %d\n", maxSubArraySum(A, 0, n - 1));
	return 0;

}
int maxNum(int a, int b, int c)
{
	if (a > b)
		return a > c ? a : c;
	else
		return b > c ? b : c;
}
int maxSumArraySum(int A[], int left, int right)
{
	int maxLeftSum, maxRightSum;
	int maxLeftBorderSum, maxRightBorderSum;
	int leftBorderSum, rightBorderSum;
	if (left == right)
	{
		if (A[left] > 0)
			return A[left];
		else
			return 0;
	}
	int mid = (left + right) / 2, i;
	maxLeftSum = maxSumArraySum(A, left, mid);
	maxRightSum = maxSubArraySum(A, mid + 1, right);
	maxLeftBorderSum = 0, leftBorderSum = 0;
	for (i = mid; i >= left; i--)
	{
		leftBorderSum += A[i];
		if (leftBorderSum > maxLeftBorderSum)
			maxLeftBorderSum = leftBorderSum;
	}
	maxRightBorderSum = 0, rightBorderSum = 0;
	for (i = mid + 1; i <= right; i++)
	{
		rightBorderSum += A[i];
		if (rightBorderSum > maxRightBorderSum)
			maxRightBorderSum = rightBorderSum;
	}
	return maxNum(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);
}
